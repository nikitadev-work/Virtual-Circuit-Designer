services:
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - my_shared_network

  promtail:
    image: grafana/promtail:latest
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - my_shared_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - loki
    networks:
      - my_shared_network

  database:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: vcddbname
      POSTGRES_USER: vcddbuser
      POSTGRES_PASSWORD: vcddbpassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vcddbuser -d vcddbname"]
      interval: 3s
      timeout: 3s
      retries: 5
    networks:
      - my_shared_network

  database-service:
    image: nikitakhripunkov/backend-database-service:${DB_TAG}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - my_shared_network

  auth-service:
    image: nikitakhripunkov/backend-auth-service:${AUTH_TAG}
    depends_on:
      database:
        condition: service_healthy
      database-service:
        condition: service_started
    networks:
      - my_shared_network

  api-service:
    image: nikitakhripunkov/backend-api-service:${API_TAG}
    ports:
      - "8052:8080"
    depends_on:
      database:
        condition: service_healthy
      auth-service:
        condition: service_started
      database-service:
        condition: service_started
    networks:
      my_shared_network:
        ipv4_address: 172.18.0.10

  runningnode-service:
    build:
      context: ./backend/RunningNode_service
    networks:
      - my_shared_network

  frontend:
    image: nikitakhripunkov/frontend-vcd:${FRONTEND_TAG}
    restart: always
    ports:
      - "80:3000"
    networks:
      - my_shared_network

networks:
  my_shared_network:
    driver: bridge
    ipam:
      config:
        - subnet:  "172.18.0.0/16"
          gateway: "172.18.0.1"

volumes:
  grafana_data: