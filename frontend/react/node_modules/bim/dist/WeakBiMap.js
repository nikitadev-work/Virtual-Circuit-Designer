"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _WeakBiMap_left, _WeakBiMap_right;
Object.defineProperty(exports, "__esModule", { value: true });
class WeakBiMap {
    constructor(iterable) {
        _WeakBiMap_left.set(this, void 0);
        _WeakBiMap_right.set(this, void 0);
        __classPrivateFieldSet(this, _WeakBiMap_left, new WeakMap(), "f");
        __classPrivateFieldSet(this, _WeakBiMap_right, new WeakMap(), "f");
        if (iterable === undefined) {
            return;
        }
        for (const [k, v] of iterable) {
            __classPrivateFieldGet(this, _WeakBiMap_left, "f").set(k, v);
            __classPrivateFieldGet(this, _WeakBiMap_right, "f").set(v, k);
        }
    }
    delete(key) {
        const val = __classPrivateFieldGet(this, _WeakBiMap_left, "f").get(key);
        if (!__classPrivateFieldGet(this, _WeakBiMap_right, "f").has(val)) {
            return false;
        }
        __classPrivateFieldGet(this, _WeakBiMap_right, "f").delete(val);
        return __classPrivateFieldGet(this, _WeakBiMap_left, "f").delete(key);
    }
    get(key) {
        return __classPrivateFieldGet(this, _WeakBiMap_left, "f").get(key);
    }
    has(key) {
        return __classPrivateFieldGet(this, _WeakBiMap_left, "f").has(key);
    }
    set(key, value) {
        const left = __classPrivateFieldGet(this, _WeakBiMap_left, "f");
        const right = __classPrivateFieldGet(this, _WeakBiMap_right, "f");
        const oldVal = left.get(key);
        const oldKey = right.get(value);
        if (left.has(key)) {
            right.delete(oldVal);
        }
        if (right.has(value)) {
            left.delete(oldKey);
        }
        left.set(key, value);
        right.set(value, key);
        return this;
    }
    get [(_WeakBiMap_left = new WeakMap(), _WeakBiMap_right = new WeakMap(), Symbol.toStringTag)]() {
        return __classPrivateFieldGet(this, _WeakBiMap_left, "f")[Symbol.toStringTag];
    }
    deleteValue(value) {
        const key = __classPrivateFieldGet(this, _WeakBiMap_right, "f").get(value);
        if (!__classPrivateFieldGet(this, _WeakBiMap_left, "f").has(key)) {
            return false;
        }
        __classPrivateFieldGet(this, _WeakBiMap_left, "f").delete(key);
        return __classPrivateFieldGet(this, _WeakBiMap_right, "f").delete(value);
    }
    getKey(value) {
        return __classPrivateFieldGet(this, _WeakBiMap_right, "f").get(value);
    }
    hasValue(value) {
        return __classPrivateFieldGet(this, _WeakBiMap_right, "f").has(value);
    }
}
exports.default = WeakBiMap;
//# sourceMappingURL=WeakBiMap.js.map