stages:
  - build
  - deploy

variables:
  IMAGE_REGISTRY: "docker.io/${DOCKERHUB_USER}"
  CANONICAL_KANIKO_IMAGE: "gcr.io/kaniko-project/executor:latest"

# Подготовительный job: генерим конфиг Docker для Kaniko
kaniko-credentials:
  stage: build
  image: alpine:latest
  script:
    - mkdir -p kaniko/.docker
    - |
      cat <<EOF > kaniko/.docker/config.json
      {
        "auths": {
          "docker.io": {
            "username": "${DOCKERHUB_USER}",
            "password": "${DOCKERHUB_TOKEN}"
          }
        }
      }
      EOF
  artifacts:
    paths:
      - kaniko/.docker/config.json

# Собираем и пушим образы Kaniko-ом
build_and_push_images:
  stage: build
  image:
    name: $CANONICAL_KANIKO_IMAGE
    entrypoint: [""]
  dependencies:
    - kaniko-credentials
  variables:
    DOCKER_CONFIG: "/kaniko/.docker"
  script:
    # Копируем credentials из артефакта в ожидаемое место
    - mkdir -p /kaniko/.docker
    - cp kaniko/.docker/config.json /kaniko/.docker/config.json

    # Собираем фронтенд
    - /kaniko/executor \
      --context ${CI_PROJECT_DIR}/frontend \
      --dockerfile ${CI_PROJECT_DIR}/frontend/Dockerfile \
      --destination ${IMAGE_REGISTRY}/frontend-vcd:latest \
      --cleanup

    # Собираем backend-сервисы
    - /kaniko/executor --context ${CI_PROJECT_DIR}/backend/API_service  --dockerfile ${CI_PROJECT_DIR}/backend/API_service/Dockerfile  --destination ${IMAGE_REGISTRY}/backend-api-service:latest  --cleanup
    - /kaniko/executor --context ${CI_PROJECT_DIR}/backend/Authentication_service --dockerfile ${CI_PROJECT_DIR}/backend/Authentication_service/Dockerfile --destination ${IMAGE_REGISTRY}/backend-auth-service:latest --cleanup
    - /kaniko/executor --context ${CI_PROJECT_DIR}/backend/Database_service --dockerfile ${CI_PROJECT_DIR}/backend/Database_service/Dockerfile --destination ${IMAGE_REGISTRY}/backend-database-service:latest --cleanup

deploy_to_server:
  stage: deploy
  image: alpine:latest
  dependencies:
    - build_and_push_images
  before_script:
    - apk add --no-cache openssh-client git
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - ssh -i ~/.ssh/id_ed25519 root@85.198.81.168 "echo 'SSH OK'"
    - |
      ssh -i ~/.ssh/id_ed25519 root@85.198.81.168 << 'EOH'
        cd /root/visual-circuit-designer
        git fetch origin
        git reset --hard origin/main
        docker-compose pull
        docker-compose up -d --force-recreate
      EOH
